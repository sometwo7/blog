<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>佚名</title>
  
  <subtitle>一生太短，请务必热情！(Life too short, just be active!)</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://sometwo7.github.io/blog/"/>
  <updated>2019-10-31T03:09:38.412Z</updated>
  <id>https://sometwo7.github.io/blog/</id>
  
  <author>
    <name>Sometwo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo 搭建 blog</title>
    <link href="https://sometwo7.github.io/blog/post/41a885c9.html"/>
    <id>https://sometwo7.github.io/blog/post/41a885c9.html</id>
    <published>2019-10-31T09:49:32.000Z</published>
    <updated>2019-10-31T03:09:38.412Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参考文章&quot;&gt;&lt;a href=&quot;#参考文章&quot; class=&quot;headerlink&quot; title=&quot;参考文章&quot;&gt;&lt;/a&gt;参考文章&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;http://www.likekeep.me/post/62703.html&lt;/p&gt;
&lt;/bloc
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://sometwo7.github.io/blog/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://sometwo7.github.io/blog/tags/hexo/"/>
    
      <category term="next" scheme="https://sometwo7.github.io/blog/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>反击爬虫，前端工程师的脑洞可以有多大？</title>
    <link href="https://sometwo7.github.io/blog/post/f2bb9475.html"/>
    <id>https://sometwo7.github.io/blog/post/f2bb9475.html</id>
    <published>2019-10-29T20:36:00.000Z</published>
    <updated>2019-10-31T03:09:38.416Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h3&gt;&lt;p&gt;对于一张网页，我们往往希望它是结构良好，内容清晰的，这样搜索引擎才能准确地认知它。&lt;br&gt;而反过来，又有一些情景，我们不希望内容能被轻易获取，比方说电商网站的交易额，教育网站的题目等。因为这些内容，往往是一个产品的生命线，必须做到有效地保护。这就是&lt;strong&gt;爬虫与反爬虫&lt;/strong&gt;这一话题的由来。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="前端" scheme="https://sometwo7.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="安全" scheme="https://sometwo7.github.io/blog/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>01 | 基础架构：一条SQL查询语句是如何执行的？</title>
    <link href="https://sometwo7.github.io/blog/post/23046aa4.html"/>
    <id>https://sometwo7.github.io/blog/post/23046aa4.html</id>
    <published>2019-10-29T14:15:45.000Z</published>
    <updated>2019-10-31T03:09:38.412Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;01-基础架构：一条SQL查询语句是如何执行的？&quot;&gt;&lt;a href=&quot;#01-基础架构：一条SQL查询语句是如何执行的？&quot; class=&quot;headerlink&quot; title=&quot;01 | 基础架构：一条SQL查询语句是如何执行的？&quot;&gt;&lt;/a&gt;01 | 基础架构：一条SQL查询语句是如何执行的？&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;gt; select * from T where ID=10；&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;比如，你有个最简单的表，表里只有一个ID字段，在执行上面这个查询语句时，我们看到的只是输入一条语句，返回一个结果，却不知道这条语句在MySQL内部的执行过程。所以今天我想和你一起把MySQL拆解一下，看看里面都有哪些“零件”，希望借由这个拆解过程，让你对MySQL有更深入的理解。这样当我们碰到MySQL的一些异常或者问题时，就能够直戳本质，更为快速地定位并解决问题。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="MYSQL" scheme="https://sometwo7.github.io/blog/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>02 | 日志架构：一条SQL更新语句是如何执行的？</title>
    <link href="https://sometwo7.github.io/blog/post/5fc62eb9.html"/>
    <id>https://sometwo7.github.io/blog/post/5fc62eb9.html</id>
    <published>2019-10-29T14:15:45.000Z</published>
    <updated>2019-10-31T03:09:38.412Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;02-日志架构：一条SQL更新语句是如何执行的？&quot;&gt;&lt;a href=&quot;#02-日志架构：一条SQL更新语句是如何执行的？&quot; class=&quot;headerlink&quot; title=&quot;02 | 日志架构：一条SQL更新语句是如何执行的？&quot;&gt;&lt;/a&gt;02 | 日志架构：一条SQL更新语句是如何执行的？&lt;/h1&gt;&lt;p&gt;前面我们系统了解了一个查询语句的执行流程，并介绍了执行过程中涉及的处理模块。相信你还记得，一条查询语句的执行过程一般是经过连接器、分析器、优化器、执行器等功能模块，最后到达存储引擎。&lt;/p&gt;&lt;p&gt;那么，一条更新语句的执行流程又是怎样的呢？&lt;/p&gt;&lt;p&gt;之前你可能经常听DBA同事说，MySQL可以恢复到半个月内任意一秒的状态，惊叹的同时，你是不是心中也不免会好奇，这是怎样做到的呢？&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="MYSQL" scheme="https://sometwo7.github.io/blog/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>优秀网站记录</title>
    <link href="https://sometwo7.github.io/blog/post/e5ba9dfa.html"/>
    <id>https://sometwo7.github.io/blog/post/e5ba9dfa.html</id>
    <published>2019-10-08T19:49:19.000Z</published>
    <updated>2019-10-31T03:09:38.412Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;计算机书籍&quot;&gt;&lt;a href=&quot;#计算机书籍&quot; class=&quot;headerlink&quot; title=&quot;计算机书籍&quot;&gt;&lt;/a&gt;计算机书籍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://itpanda.net/book/&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
    
      <category term="website" scheme="https://sometwo7.github.io/blog/categories/website/"/>
    
    
      <category term="nice web" scheme="https://sometwo7.github.io/blog/tags/nice-web/"/>
    
  </entry>
  
  <entry>
    <title>Java基础(汇总)</title>
    <link href="https://sometwo7.github.io/blog/post/8b7b30a1.html"/>
    <id>https://sometwo7.github.io/blog/post/8b7b30a1.html</id>
    <published>2019-10-04T19:49:32.000Z</published>
    <updated>2019-10-31T03:09:38.412Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JAVA&quot;&gt;&lt;a href=&quot;#JAVA&quot; class=&quot;headerlink&quot; title=&quot;JAVA&quot;&gt;&lt;/a&gt;JAVA&lt;/h1&gt;&lt;p&gt;想要面试的初/中/想要面试的初/中/高级 Java 程序员&lt;br&gt;想要查漏补缺的人&lt;br&gt;想要不断完善和扩充自己 Java 技术栈的人&lt;br&gt;原本就掌握了技术却不知道怎么表达的人&lt;br&gt;有上进心,也愿意学习的人&lt;/p&gt;
&lt;p&gt;一、 面试题覆盖全,且解析全面&lt;/p&gt;
&lt;p&gt;这份面试题总内容包含了十九个模块：Java 基础、容器、多线程、反射、对象拷贝、Java Web 模块、异常、网络、设计模式、Spring/Spring MVC、Spring Boot/Spring Cloud、Hibernate、Mybatis、RabbitMQ、Kafka、Zookeeper、MySql、Redis、JVM .&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java学习" scheme="https://sometwo7.github.io/blog/categories/Java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="https://sometwo7.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JVM</title>
    <link href="https://sometwo7.github.io/blog/post/66c016fb.html"/>
    <id>https://sometwo7.github.io/blog/post/66c016fb.html</id>
    <published>2019-10-04T19:49:29.000Z</published>
    <updated>2019-10-31T03:09:38.412Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JVM&quot;&gt;&lt;a href=&quot;#JVM&quot; class=&quot;headerlink&quot; title=&quot;JVM&quot;&gt;&lt;/a&gt;JVM&lt;/h1&gt;&lt;h2 id=&quot;1-说一下-jvm-的主要组成部分？及其作用？&quot;&gt;&lt;a href=&quot;#1-说一下-jvm-的主要组成部分？及其作用？&quot; class=&quot;headerlink&quot; title=&quot;1. 说一下 jvm 的主要组成部分？及其作用？&quot;&gt;&lt;/a&gt;1. 说一下 jvm 的主要组成部分？及其作用？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;jvm的主要组成有，类加载器子系统，运行时数据区，执行引擎，本地库接口，垃圾收集模块；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;首先通过类加载器（ClassLoader）会把 Java 字节码加载到内存中，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运行时数据区（Runtime Data Area）存储被加载的字节码，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;而字节码文件只是 JVM 的一套指令集规范，并不能直接交个底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），将字节码翻译成底层系统指令，再交由 CPU 去执行，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;垃圾收集模块，清除内存中多余的内容，回收可重复使用的内存空间。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java学习" scheme="https://sometwo7.github.io/blog/categories/Java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="https://sometwo7.github.io/blog/tags/Java/"/>
    
      <category term="JVM" scheme="https://sometwo7.github.io/blog/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="https://sometwo7.github.io/blog/post/bae4ff13.html"/>
    <id>https://sometwo7.github.io/blog/post/bae4ff13.html</id>
    <published>2019-10-04T19:49:28.000Z</published>
    <updated>2019-10-31T03:09:38.412Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h1&gt;&lt;h2 id=&quot;1-redis-是什么？都有哪些使用场景？&quot;&gt;&lt;a href=&quot;#1-redis-是什么？都有哪些使用场景？&quot; class=&quot;headerlink&quot; title=&quot;1. redis 是什么？都有哪些使用场景？&quot;&gt;&lt;/a&gt;1. redis 是什么？都有哪些使用场景？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;redis 是一个开源的，使用 C 语言编写，支持网络，可基于内存，可持久化的日志型、键值对数据库，并提供多种语言的API接口；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;redis 使用场景主要有三种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高并发的数据读写&lt;/li&gt;
&lt;li&gt;海量数据的读写&lt;/li&gt;
&lt;li&gt;对扩展性要求的高的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java学习" scheme="https://sometwo7.github.io/blog/categories/Java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="https://sometwo7.github.io/blog/tags/Java/"/>
    
      <category term="Redis" scheme="https://sometwo7.github.io/blog/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Mysql</title>
    <link href="https://sometwo7.github.io/blog/post/54e1373e.html"/>
    <id>https://sometwo7.github.io/blog/post/54e1373e.html</id>
    <published>2019-10-04T19:49:27.000Z</published>
    <updated>2019-10-31T03:09:38.412Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MySql&quot;&gt;&lt;a href=&quot;#MySql&quot; class=&quot;headerlink&quot; title=&quot;MySql&quot;&gt;&lt;/a&gt;MySql&lt;/h1&gt;&lt;h2 id=&quot;数据库的三范式是什么？&quot;&gt;&lt;a href=&quot;#数据库的三范式是什么？&quot; class=&quot;headerlink&quot; title=&quot;数据库的三范式是什么？&quot;&gt;&lt;/a&gt;数据库的三范式是什么？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一范式，关系表中的每列都是原子不可分的项，即每个属性都是最基本的项；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二范式，在满足第一范式的前提下，关系表的所有非主属性完全依赖于每一个候选关键属性；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第三范式，在满足第二范式的前提下，关系表的所有非主属性由主键直接决定。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java学习" scheme="https://sometwo7.github.io/blog/categories/Java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="https://sometwo7.github.io/blog/tags/Java/"/>
    
      <category term="DB" scheme="https://sometwo7.github.io/blog/tags/DB/"/>
    
      <category term="Mysql" scheme="https://sometwo7.github.io/blog/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper</title>
    <link href="https://sometwo7.github.io/blog/post/b829b66a.html"/>
    <id>https://sometwo7.github.io/blog/post/b829b66a.html</id>
    <published>2019-10-04T19:49:26.000Z</published>
    <updated>2019-10-31T03:09:38.412Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Zookeeper&quot;&gt;&lt;a href=&quot;#Zookeeper&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper&quot;&gt;&lt;/a&gt;Zookeeper&lt;/h1&gt;&lt;h2 id=&quot;1-zookeeper-是什么？&quot;&gt;&lt;a href=&quot;#1-zookeeper-是什么？&quot; class=&quot;headerlink&quot; title=&quot;1. zookeeper 是什么？&quot;&gt;&lt;/a&gt;1. zookeeper 是什么？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;zookeeper 是一个开源的分布式应用程序协调服务。&lt;/li&gt;
&lt;li&gt;为分布式应用提供数据一致性服务，&lt;/li&gt;
&lt;li&gt;功能包括，配置维护、域名服务、分布式同步、组服务。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java学习" scheme="https://sometwo7.github.io/blog/categories/Java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="https://sometwo7.github.io/blog/tags/Java/"/>
    
      <category term="Zookeeper" scheme="https://sometwo7.github.io/blog/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>Kafka</title>
    <link href="https://sometwo7.github.io/blog/post/9a7d5a13.html"/>
    <id>https://sometwo7.github.io/blog/post/9a7d5a13.html</id>
    <published>2019-10-04T19:49:25.000Z</published>
    <updated>2019-10-31T03:09:38.412Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Kafka&quot;&gt;&lt;a href=&quot;#Kafka&quot; class=&quot;headerlink&quot; title=&quot;Kafka&quot;&gt;&lt;/a&gt;Kafka&lt;/h1&gt;&lt;h2 id=&quot;1-kafka-可以脱离-zookeeper-单独使用吗？为什么？&quot;&gt;&lt;a href=&quot;#1-kafka-可以脱离-zookeeper-单独使用吗？为什么？&quot; class=&quot;headerlink&quot; title=&quot;1. kafka 可以脱离 zookeeper 单独使用吗？为什么？&quot;&gt;&lt;/a&gt;1. kafka 可以脱离 zookeeper 单独使用吗？为什么？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;kafka 不能脱离 zookeeper 单独使用，&lt;/li&gt;
&lt;li&gt;因为 kafka 使用 zookeeper 管理和协调 kafka 的节点服务器。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java学习" scheme="https://sometwo7.github.io/blog/categories/Java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="https://sometwo7.github.io/blog/tags/Java/"/>
    
      <category term="Kafka" scheme="https://sometwo7.github.io/blog/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ</title>
    <link href="https://sometwo7.github.io/blog/post/b543ced0.html"/>
    <id>https://sometwo7.github.io/blog/post/b543ced0.html</id>
    <published>2019-10-04T19:49:24.000Z</published>
    <updated>2019-10-31T03:09:38.412Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RabbitMQ&quot;&gt;&lt;a href=&quot;#RabbitMQ&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ&quot;&gt;&lt;/a&gt;RabbitMQ&lt;/h1&gt;&lt;h2 id=&quot;1-rabbitmq-的使用场景有哪些？&quot;&gt;&lt;a href=&quot;#1-rabbitmq-的使用场景有哪些？&quot; class=&quot;headerlink&quot; title=&quot;1. rabbitmq 的使用场景有哪些？&quot;&gt;&lt;/a&gt;1. rabbitmq 的使用场景有哪些？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;跨系统的异步通信，所有需要异步交互的地方都可以使用消息队列。就像我们除了打电话（同步）以外，还需要发短信，发电子邮件（异步）的通讯方式。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java学习" scheme="https://sometwo7.github.io/blog/categories/Java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="https://sometwo7.github.io/blog/tags/Java/"/>
    
      <category term="MQ" scheme="https://sometwo7.github.io/blog/tags/MQ/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis</title>
    <link href="https://sometwo7.github.io/blog/post/da3e1361.html"/>
    <id>https://sometwo7.github.io/blog/post/da3e1361.html</id>
    <published>2019-10-04T19:49:23.000Z</published>
    <updated>2019-10-31T03:09:38.412Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mybatis&quot;&gt;&lt;a href=&quot;#Mybatis&quot; class=&quot;headerlink&quot; title=&quot;Mybatis&quot;&gt;&lt;/a&gt;Mybatis&lt;/h1&gt;&lt;h2 id=&quot;1-mybatis-中-和-的区别是什么？&quot;&gt;&lt;a href=&quot;#1-mybatis-中-和-的区别是什么？&quot; class=&quot;headerlink&quot; title=&quot;1. mybatis 中 #{}和 ${}的区别是什么？&quot;&gt;&lt;/a&gt;1. mybatis 中 #{}和 ${}的区别是什么？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;#{}是预编译处理，${}是字符串替换；&lt;/li&gt;
&lt;li&gt;Mybatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值；&lt;/li&gt;
&lt;li&gt;Mybatis在处理${}时，就是把${}替换成变量的值；&lt;/li&gt;
&lt;li&gt;使用#{}可以有效的防止SQL注入，提高系统安全性。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java学习" scheme="https://sometwo7.github.io/blog/categories/Java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="https://sometwo7.github.io/blog/tags/Java/"/>
    
      <category term="Mybatis" scheme="https://sometwo7.github.io/blog/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate</title>
    <link href="https://sometwo7.github.io/blog/post/6f8276a9.html"/>
    <id>https://sometwo7.github.io/blog/post/6f8276a9.html</id>
    <published>2019-10-04T19:49:22.000Z</published>
    <updated>2019-10-31T03:09:38.412Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hibernate&quot;&gt;&lt;a href=&quot;#Hibernate&quot; class=&quot;headerlink&quot; title=&quot;Hibernate&quot;&gt;&lt;/a&gt;Hibernate&lt;/h1&gt;&lt;h2 id=&quot;1-为什么要使用-hibernate？&quot;&gt;&lt;a href=&quot;#1-为什么要使用-hibernate？&quot; class=&quot;headerlink&quot; title=&quot;1. 为什么要使用 hibernate？&quot;&gt;&lt;/a&gt;1. 为什么要使用 hibernate？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;对 JDBC 访问数据库的代码做了封装，大大简化了数据访问层繁琐的重复性代码。&lt;/li&gt;
&lt;li&gt;hibernate 是一个基于JDBC的主流持久化框架，是一个优秀的ORM实现。他很大程度的简化DAO层的编码工作&lt;/li&gt;
&lt;li&gt;hibernate 使用 Java 反射机制，而不是字节码增强程序来实现透明性。&lt;/li&gt;
&lt;li&gt;hibernate 的性能非常好，因为它是个轻量级框架。映射的灵活性很出色。它支持各种关系数据库，从一对一到多对多的各种复杂关系。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java学习" scheme="https://sometwo7.github.io/blog/categories/Java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="https://sometwo7.github.io/blog/tags/Java/"/>
    
      <category term="Hibernate" scheme="https://sometwo7.github.io/blog/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot/Spring Cloud</title>
    <link href="https://sometwo7.github.io/blog/post/b3383f7f.html"/>
    <id>https://sometwo7.github.io/blog/post/b3383f7f.html</id>
    <published>2019-10-04T19:49:21.000Z</published>
    <updated>2019-10-31T03:09:38.412Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-Boot-Spring-Cloud&quot;&gt;&lt;a href=&quot;#Spring-Boot-Spring-Cloud&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot/Spring Cloud&quot;&gt;&lt;/a&gt;Spring Boot/Spring Cloud&lt;/h1&gt;&lt;h2 id=&quot;1-什么是-spring-boot？&quot;&gt;&lt;a href=&quot;#1-什么是-spring-boot？&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是 spring boot？&quot;&gt;&lt;/a&gt;1. 什么是 spring boot？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在Spring框架这个大家族中，产生了很多衍生框架，比如 Spring、SpringMVC框架等，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spring的核心内容在于控制反转(IOC)和依赖注入(DI),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在操作方面是指在spring配置文件中创建，依赖注入即为由spring容器为应用程序的某个对象提供资源，比如 引用对象、常量数据等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SpringBoot是一个框架，一种全新的编程规范，他的产生简化了框架的使用，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所谓简化是指简化了Spring众多框架中所需的大量且繁琐的配置文件，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所以 SpringBoot是一个服务于框架的框架，服务范围是简化配置文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java学习" scheme="https://sometwo7.github.io/blog/categories/Java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="https://sometwo7.github.io/blog/tags/Java/"/>
    
      <category term="Spring" scheme="https://sometwo7.github.io/blog/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring/Spring MVC</title>
    <link href="https://sometwo7.github.io/blog/post/ae9d29e2.html"/>
    <id>https://sometwo7.github.io/blog/post/ae9d29e2.html</id>
    <published>2019-10-04T19:49:20.000Z</published>
    <updated>2019-10-31T03:09:38.412Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-Spring-MVC&quot;&gt;&lt;a href=&quot;#Spring-Spring-MVC&quot; class=&quot;headerlink&quot; title=&quot;Spring/Spring MVC&quot;&gt;&lt;/a&gt;Spring/Spring MVC&lt;/h1&gt;&lt;h2 id=&quot;为什么要使用-spring？&quot;&gt;&lt;a href=&quot;#为什么要使用-spring？&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用 spring？&quot;&gt;&lt;/a&gt;为什么要使用 spring？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;简介&lt;ul&gt;
&lt;li&gt;目的：解决企业应用开发的复杂性&lt;/li&gt;
&lt;li&gt;功能：使用基本的JavaBean代替EJB，并提供了更多的企业应用功能&lt;/li&gt;
&lt;li&gt;范围：任何Java应用&lt;/li&gt;
&lt;li&gt;简单来说，Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器框架。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java学习" scheme="https://sometwo7.github.io/blog/categories/Java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="https://sometwo7.github.io/blog/tags/Java/"/>
    
      <category term="Spring" scheme="https://sometwo7.github.io/blog/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://sometwo7.github.io/blog/post/364ea8cc.html"/>
    <id>https://sometwo7.github.io/blog/post/364ea8cc.html</id>
    <published>2019-10-04T19:49:19.000Z</published>
    <updated>2019-10-31T03:09:38.412Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h1&gt;&lt;h2 id=&quot;1-说一下你熟悉的设计模式？&quot;&gt;&lt;a href=&quot;#1-说一下你熟悉的设计模式？&quot; class=&quot;headerlink&quot; title=&quot;1. 说一下你熟悉的设计模式？&quot;&gt;&lt;/a&gt;1. 说一下你熟悉的设计模式？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;根据目的来分可以可以分成3类，创建型、结构型、行为型；&lt;ul&gt;
&lt;li&gt;创建型有5种，工厂方法，抽象工厂，原型，单例，建造者；&lt;/li&gt;
&lt;li&gt;结构型有7种，适配器，代理，桥接，装饰，外观，享元，组合；&lt;/li&gt;
&lt;li&gt;行为型有11种，模板方法，解释器，策略，命令，职责链，状态，观察者，中介者，迭代器，访问，备忘录；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;根据作用范围来分，可以有两类，分别是类模式、对象模式；&lt;ul&gt;
&lt;li&gt;类模式主要有4种，工厂方法，类的适配器，模板方法，解释器；&lt;/li&gt;
&lt;li&gt;对象模式有20种，单例，原型，抽象工厂，建造者，代理，对象的适配器，桥接，装饰，外观，享元，组合，策略，命令，责任链，状态，观察者，中介者，迭代器，访问者，备忘录；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java学习" scheme="https://sometwo7.github.io/blog/categories/Java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="https://sometwo7.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>网络</title>
    <link href="https://sometwo7.github.io/blog/post/50daec4.html"/>
    <id>https://sometwo7.github.io/blog/post/50daec4.html</id>
    <published>2019-10-04T19:49:18.000Z</published>
    <updated>2019-10-31T03:09:38.412Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;网络&quot;&gt;&lt;a href=&quot;#网络&quot; class=&quot;headerlink&quot; title=&quot;网络&quot;&gt;&lt;/a&gt;网络&lt;/h1&gt;&lt;h2 id=&quot;1-http-响应码-301-和-302-代表的是什么？有什么区别？&quot;&gt;&lt;a href=&quot;#1-http-响应码-301-和-302-代表的是什么？有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;1. http 响应码 301 和 302 代表的是什么？有什么区别？&quot;&gt;&lt;/a&gt;1. http 响应码 301 和 302 代表的是什么？有什么区别？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;301：永久重定向。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;302：暂时重定向。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;它们的区别是，301 对搜索引擎优化（SEO）更加有利；302 有被提示为网络拦截的风险。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java学习" scheme="https://sometwo7.github.io/blog/categories/Java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="https://sometwo7.github.io/blog/tags/Java/"/>
    
      <category term="网络" scheme="https://sometwo7.github.io/blog/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>异常</title>
    <link href="https://sometwo7.github.io/blog/post/23a3bd72.html"/>
    <id>https://sometwo7.github.io/blog/post/23a3bd72.html</id>
    <published>2019-10-04T19:49:17.000Z</published>
    <updated>2019-10-31T03:09:38.412Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerlink&quot; title=&quot;异常&quot;&gt;&lt;/a&gt;异常&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Java 的异常处理是通过 5 个关键字来实现的：try，catch，throw，throws，finally。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-throw-和-throws-的区别？&quot;&gt;&lt;a href=&quot;#1-throw-和-throws-的区别？&quot; class=&quot;headerlink&quot; title=&quot;1. throw 和 throws 的区别？&quot;&gt;&lt;/a&gt;1. throw 和 throws 的区别？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;throw：是真实抛出一个异常。&lt;/li&gt;
&lt;li&gt;throws：是声明可能会抛出一个异常。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java学习" scheme="https://sometwo7.github.io/blog/categories/Java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="https://sometwo7.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java Web</title>
    <link href="https://sometwo7.github.io/blog/post/fb60fea1.html"/>
    <id>https://sometwo7.github.io/blog/post/fb60fea1.html</id>
    <published>2019-10-04T19:49:16.000Z</published>
    <updated>2019-10-31T03:09:38.412Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java-Web&quot;&gt;&lt;a href=&quot;#Java-Web&quot; class=&quot;headerlink&quot; title=&quot;Java Web&quot;&gt;&lt;/a&gt;Java Web&lt;/h1&gt;&lt;h2 id=&quot;1-jsp-和-servlet-有什么区别？&quot;&gt;&lt;a href=&quot;#1-jsp-和-servlet-有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;1. jsp 和 servlet 有什么区别？&quot;&gt;&lt;/a&gt;1. jsp 和 servlet 有什么区别？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;JSP是servlet技术的扩展，本质上就是servlet的简易方式。&lt;/li&gt;
&lt;li&gt;servlet和JSP最主要的不同点在于，&lt;ul&gt;
&lt;li&gt;servlet的应用逻辑是在Java文件中，并且完全从表示层中的html里分离开来，&lt;/li&gt;
&lt;li&gt;而JSP的情况是Java和html可以组合成一个扩展名为JSP的文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JSP侧重于视图，servlet主要用于控制逻辑。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java学习" scheme="https://sometwo7.github.io/blog/categories/Java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="https://sometwo7.github.io/blog/tags/Java/"/>
    
      <category term="Web" scheme="https://sometwo7.github.io/blog/tags/Web/"/>
    
  </entry>
  
</feed>
